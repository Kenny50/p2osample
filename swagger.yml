openapi: 3.0.0
info:
  title: 金玉峰投顧 api
  description: Api 格式釋出：會員、文章，其餘僅供參考
  version: 10.12.1603
servers:
  - url: https://gnim.com.tw
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: 會員
  - name: 文章
  - name: 後台
  - name: 後台 > 文章
  - name: 後台 > 帳戶
  - name: 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
  - name: 搜尋
  - name: 標籤、主題
paths:
  /dev/auth/google:
    post:
      tags:
        - 會員
      summary: google login
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  description: google access token
                  example: token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: uuid
                email: null
                accessToken: YOUR_ACCESS_TOKEN
                refreshToken: YOUR_REFRESH_TOKEN
  /dev/auth/line:
    post:
      tags:
        - 會員
      summary: line login
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - idToken
              properties:
                idToken:
                  type: string
                  description: line id token
                  example: token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: uuid
                email: null
                accessToken: YOUR_ACCESS_TOKEN
                refreshToken: YOUR_REFRESH_TOKEN
  /dev/member/refresh-token:
    post:
      tags:
        - 會員
      summary: refresh token
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: ''
                  example: ' "YOUR_REFRESH_TOKEN"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                accessToken: YOUR_ACCESS_TOKEN
  /dev/member/update-information:
    post:
      tags:
        - 會員
      summary: update personal information
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: google
                email:
                  type: string
                  example: hello@gmail.com
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: new name
                email: youremail@gmail.com
                isEmailValidate: false
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              example:
                message: 此電子郵箱已被使用
  /dev/member/sent-validate-email:
    get:
      tags:
        - 會員
      summary: 補寄驗證信件
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                message: your email is already validated
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
              example:
                message: validate mail has sent, please check out your mailbox
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                message: email field is empty
  /dev/member/information:
    get:
      tags:
        - 會員
      summary: 個人資訊，請等待訂閱格式出來
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: Lisa
                email: lisa@gmail.com
                isEmailValidate: true
                avatar: null
                loginType: google
                thirdPartyIdentifier: lisa@gmail.com
                isSubscribing: false
  /dev/member/delete-account:
    delete:
      tags:
        - 會員
      summary: delete account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                message: succcess
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: refund is processing
                  value:
                    message: Cannot delete account while refund is processing.
                example-1:
                  summary: reject, subscription plan period
                  value:
                    message: >-
                      Cannot delete account while in your subscription plan
                      period.
  /dev/member/validate-email:
    get:
      tags:
        - 會員
      summary: mail validate
      security:
        - bearerAuth: []
      parameters:
        - name: signature
          in: query
          schema:
            type: string
          required: true
          description: link from email, 要有個前端專門處理驗證的畫面
          example: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                message: 信箱驗證成功
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                message: 信箱驗證成功
  /dev/member/term/{term}:
    post:
      tags:
        - 會員
      summary: privacy policy
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      parameters:
        - name: term
          in: path
          schema:
            type: string
          required: true
          description: '[required] privacy, user, subscribe'
          example: privacy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                message: success
  /dev/article/all-topic-latest:
    get:
      tags:
        - 文章
      summary: 首頁文章各主題最新清單
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                articles:
                  - id: 1
                    title: 你好，世界
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 基本面
                      id: 1
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-11T00:00:00.000Z'
                    previewImage: null
                    type: 1
                    isLimited: true
                  - id: 2
                    title: 雪烏龍
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 總經
                      id: 2
                    author:
                      name: Rick
                      id: 1
                    publishDate: '2023-11-10T00:00:00.000Z'
                    previewImage: https://path/to/image
                    type: 1
                    isLimited: false
  /dev/article/{id}:
    get:
      tags:
        - 文章
      summary: get article content
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: '[required] article id'
          example: '123'
      responses:
        undefined:
          content:
            application/json:
              schema:
                type: object
              example:
                id: 123
                title: 你好，世界
                content: >-
                  {"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Wow,
                  this editor instance exports its content as JSON."}]}]}
                topic:
                  name: 基本面
                  id: 1
                author:
                  name: Rick
                  id: 1
                tags:
                  - name: 毛利
                    id: 1
                publishDate: '2023-05-02T00:00:00.000Z'
                previewImage: null
                type: 1
                isLimited: true
  /dev/podcast/{id}:
    get:
      tags:
        - 文章
      summary: get podcast content
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: '[required] podcast id, not the one from spotify'
          example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                id: 1
                title: EP 89 | 科普就是在妖言惑眾 ft. 怪奇事務所所長
                content: >-
                  {"description":"你知道嗎？博恩可能把「信度」講錯了喔","spotifyId":"2WJBISLc7sVsJFrSv3hVLk","spotifyLink":"https://open.spotify.com/episode/2WJBISLc7sVsJFrSv3hVLk","applePodcastLink":"https://open.spotify.com/episode/2WJBISLc7sVsJFrSv3hVLk
                soundOnLink: https://open.spotify.com/episode/2WJBISLc7sVsJFrSv3hVLk"}
                topic:
                  name: 基本面
                  id: 1
                tags:
                  - name: 毛利
                    id: 1
                publishDate: '2023-05-02T00:00:00.000Z'
                previewImage: null
                type: 0
                isLimited: false
  /dev/article:
    get:
      tags:
        - 文章
      summary: get latest articles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                topic: 0
                articles:
                  - id: 1
                    title: 你好，世界
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 基本面
                      id: 1
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-11T00:00:00.000Z'
                    previewImage: null
                    type: 1
                    isLimited: true
                  - id: 2
                    title: 雪烏龍
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 總經
                      id: 2
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-10T00:00:00.000Z'
                    previewImage: https://path/to/image
                    type: 1
                    isLimited: false
  /dev/podcast:
    get:
      tags:
        - 文章
      summary: get latest podcasts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                topic: 0
                articles:
                  - id: 1
                    title: 你好，世界
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 基本面
                      id: 1
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-11T00:00:00.000Z'
                    previewImage: null
                    type: 1
                    isLimited: true
                  - id: 2
                    title: 雪烏龍
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 總經
                      id: 2
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-10T00:00:00.000Z'
                    previewImage: https://path/to/image
                    type: 1
                    isLimited: false
  /dev/article/authors:
    get:
      tags:
        - 文章
      summary: Authors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                authors:
                  - name: Rick
                    id: 1
                    avatar: https://path/to/img
                  - name: Riick
                    id: 2
                    avatar: https://path/to/img
  /dev/article/{id}/related:
    get:
      tags:
        - 文章
      summary: related articles
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: '[required] article id'
          example: '123'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                articles:
                  - id: 1
                    title: 你好，世界
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 基本面
                      id: 1
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-11T00:00:00.000Z'
                    previewImage: null
                    type: 1
                    isLimited: true
                  - id: 2
                    title: 雪烏龍
                    description: 揭示股市投資中的基本面因素，包括公司財務狀況、產品競爭力、行業趨勢等，為投資者提供深入了解企業價值的觀點
                    topic:
                      name: 總經
                      id: 2
                    author:
                      name: Rick
                      id: 1
                    tags:
                      - name: 毛利
                        id: 1
                    publishDate: '2023-11-10T00:00:00.000Z'
                    previewImage: https://path/to/image
                    type: 1
                    isLimited: false
  /dev-internal/image/upload:
    post:
      tags:
        - 後台 > 文章
      summary: upload image for article
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  description: ''
                  format: binary
                '':
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                url: https://path/to/img
  /dev-internal/article:
    post:
      tags:
        - 後台 > 文章
      summary: create an article
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - content
                - html
                - topic
                - isLimited
                - clipedContent
                - isDraft
              properties:
                title:
                  type: string
                  description: ''
                  example: 你好，世界
                content:
                  type: string
                  description: json stringtify
                  example: >-
                    {"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Wow,
                    this editor instance exports its content as JSON."}]}]}
                html:
                  type: string
                  description: ''
                  example: >-
                    <h2><strong>新手也能懂的 Kotlin Collection 賞玩門道</strong></h2><img
                    src="https://i.imgur.com/2vCuMM9.jpeg"  alt="canyon"
                    width="500"
                    height="600"><p>在開發者的每日工作裡，其實有很大一塊都是在做資料處理。我們抓取、截取、爬取資料，對資料做整理、過濾、轉格式，最後輸出成有系統、有意義的資訊。而在資料處理這一塊，有很大一部份的工作都是跟
                    Collection 有關。Collection
                    簡單來說，就是一群相關聯資料的集合，是個在各程式語言裡普遍常見的資料類型，從最原始的 Array，到重複與否的
                    List、Set，以及 Key-Value 對應的 Map 都屬於這種物件。</p><p>Kotlin
                    團隊深知資料處理的重要性，在標準函式庫（Stan…</p>
                topic:
                  type: integer
                  description: ''
                  example: '1'
                tags[]:
                  type: integer
                  example: '2'
                isLimited:
                  type: boolean
                  description: ''
                  example: 'false'
                clipedContent:
                  type: string
                  description: json stringtify
                  example: >-
                    {"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Wow,
                    this editor instance exports its content as JSON."}]}]}
                isDraft:
                  type: boolean
                  description: ''
                  example: 'true'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                id: 123
  /dev-internal/article/{id}:
    put:
      tags:
        - 後台 > 文章
      summary: update article
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - content
                - html
                - topic
                - isLimited
                - isDraft
              properties:
                title:
                  type: string
                  description: ''
                  example: 你好，世界
                content:
                  type: string
                  description: json stringtify
                  example: >-
                    {"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Wow,
                    this editor instance exports its content as JSON."}]}]}
                html:
                  type: string
                  description: ''
                  example: >-
                    <h2><strong>新手也能懂的 Kotlin Collection 賞玩門道</strong></h2><img
                    src="https://i.imgur.com/2vCuMM9.jpeg"  alt="canyon"
                    width="500"
                    height="600"><p>在開發者的每日工作裡，其實有很大一塊都是在做資料處理。我們抓取、截取、爬取資料，對資料做整理、過濾、轉格式，最後輸出成有系統、有意義的資訊。而在資料處理這一塊，有很大一部份的工作都是跟
                    Collection 有關。Collection
                    簡單來說，就是一群相關聯資料的集合，是個在各程式語言裡普遍常見的資料類型，從最原始的 Array，到重複與否的
                    List、Set，以及 Key-Value 對應的 Map 都屬於這種物件。</p><p>Kotlin
                    團隊深知資料處理的重要性，在標準函式庫（Stan…</p>
                topic:
                  type: integer
                  description: ''
                  example: '1'
                tags[]:
                  type: integer
                  example: '2'
                isLimited:
                  type: boolean
                  description: ''
                  example: 'false'
                isDraft:
                  type: boolean
                  description: ''
                  example: 'false'
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: '[required] article id'
          example: '123'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                id: 123
    delete:
      tags:
        - 後台 > 文章
      summary: delete article by id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: '[required] article id'
          example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                status: success
  /dev-internal/member:
    get:
      tags:
        - 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
      summary: 後台帳號 list
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    {
                        'id': 1,
                        'name': 'VossA',
                        "avatar": "https://path/to/avatar"
                    },
                    {
                        'id': 2,
                        'name': 'VossB',
                        "avatar": "https://path/to/avatar"
                    },
                    {
                        'id': 3,
                        'name': 'VossC',
                        "avatar": "https://path/to/avatar"
                    }
                }
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: permission denied
    delete:
      tags:
        - 後台 > 帳戶
      summary: 刪除自己內部帳戶
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                status: success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                message: permission denied
  /dev-internal/member/{id}:
    get:
      tags:
        - 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
      summary: 檢視指定後台帳號
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "name": "Voss",
                    "avatar": "https://path/to/avatar"
                }
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                error: permission denied
    delete:
      tags:
        - 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
      summary: 刪除指定後台帳號
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "status":"success"
                }
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "permission denied"
                }
  /dev-internal/member/{id}/update-information:
    post:
      tags:
        - 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
      summary: 更新指定後台帳號名稱
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: VossVVV
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "name": "Voss Muscle"
                }
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                message: permission denied
  /dev-internal/member/{id}/update-avatar:
    post:
      tags:
        - 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
      summary: 更新指定後台帳號頭像
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "url": "https://path/to/avatar"
                }
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "permission denied"
                }
  /dev-internal/member/{id}/update-password:
    post:
      tags:
        - 後台 > 帳戶 > Admin（後台管理員-管理後台帳號）
      summary: 更新指定後台帳號密碼
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: oldPassword
                password:
                  type: string
                  example: password
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "status":"success"
                }
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                type: string
              example: |-
                {
                    "message": "permission denied"
                }
  /dev-internal/member/create:
    post:
      tags:
        - 後台 > 帳戶
      summary: 創建內部帳戶
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                account:
                  type: string
                  example: Voss
                password:
                  type: string
                  example: vosssssssss
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                status: success
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                message: permission denied
  /dev-internal/member/login:
    post:
      tags:
        - 後台 > 帳戶
      summary: 登入內部帳戶
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                account:
                  type: string
                  example: Voss
                password:
                  type: string
                  example: vosssssssss
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                accessToken: YOUR_ACCESS_TOKEN
                refreshToken: YOUR_REFRESH_TOKEN
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                error: Invalid username or password.
  /dev-internal/member/update-information:
    post:
      tags:
        - 後台 > 帳戶
      summary: 內部帳戶更新自己個人資訊
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Voss Muscle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: Voss Muscle
  /dev-internal/member/update-avatar:
    post:
      tags:
        - 後台 > 帳戶
      summary: 內部帳戶更新自己個人頭像
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  description: user avatar
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                url: https://path/to/avatar
  /dev-internal/member/update-password:
    post:
      tags:
        - 後台 > 帳戶
      summary: 內部帳戶更新自己密碼
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Passw0rd
                oldPassword:
                  type: string
                  example: vosssssssss
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                status: success
  /dev/:
    get:
      tags:
        - 搜尋
      summary: search articles by tag, optional with topic
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /dev/topic-tag:
    get:
      tags:
        - 標籤、主題
      summary: 前臺 get tags with topics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                topics:
                  - id: 1
                    name: 基礎面
                    tags:
                      - id: 1
                        name: 毛利
  /dev-internal/topic-all:
    get:
      tags:
        - 標籤、主題
      summary: 後台 get all topic with tag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                topics:
                  - id: 1
                    name: 基礎面
                    tags:
                      - id: 1
                        name: 毛利
